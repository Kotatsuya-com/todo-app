import { NextRequest, NextResponse } from 'next/server'
import { createServerSupabaseClient } from '@/lib/supabase-server'

// „Éá„Éï„Ç©„É´„ÉàÁµµÊñáÂ≠óË®≠ÂÆö
const DEFAULT_EMOJIS = {
  today_emoji: 'fire',      // üî•
  tomorrow_emoji: 'calendar', // üìÖ
  later_emoji: 'memo'       // üìù
}

// Âà©Áî®ÂèØËÉΩ„Å™ÁµµÊñáÂ≠ó„É™„Çπ„ÉàÔºàÊã°ÂºµÂèØËÉΩÔºâ
const AVAILABLE_EMOJIS = [
  { name: 'fire', display: 'üî•', label: 'Á∑äÊÄ•' },
  { name: 'calendar', display: 'üìÖ', label: 'Ë®àÁîª' },
  { name: 'memo', display: 'üìù', label: '„É°„É¢' },
  { name: 'warning', display: '‚ö†Ô∏è', label: 'Ë≠¶Âëä' },
  { name: 'clock', display: 'üïê', label: 'ÊôÇË®à' },
  { name: 'hourglass', display: '‚è≥', label: 'Á†ÇÊôÇË®à' },
  { name: 'pushpin', display: 'üìå', label: '„Éî„É≥' },
  { name: 'bookmark', display: 'üîñ', label: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ' },
  { name: 'bulb', display: 'üí°', label: '„Ç¢„Ç§„Éá„Ç¢' },
  { name: 'star', display: '‚≠ê', label: '„Çπ„Çø„Éº' },
  { name: 'zap', display: '‚ö°', label: 'Á®≤Â¶ª' },
  { name: 'bell', display: 'üîî', label: '„Éô„É´' }
]

export async function GET(_request: NextRequest) {
  try {
    const supabase = createServerSupabaseClient()
    const { data: { user }, error: authError } = await supabase.auth.getUser()

    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // „É¶„Éº„Ç∂„Éº„ÅÆÁµµÊñáÂ≠óË®≠ÂÆö„ÇíÂèñÂæó
    const { data: settings, error } = await supabase
      .from('user_emoji_settings')
      .select('today_emoji, tomorrow_emoji, later_emoji')
      .eq('user_id', user.id)
      .single()

    if (error && error.code !== 'PGRST116') {
      return NextResponse.json({ error: 'Failed to fetch settings' }, { status: 500 })
    }

    // Ë®≠ÂÆö„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„ÉàÂÄ§„ÇíËøî„Åô
    const emojiSettings = settings || DEFAULT_EMOJIS

    return NextResponse.json({
      settings: emojiSettings,
      availableEmojis: AVAILABLE_EMOJIS
    })

  } catch (error) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function PUT(request: NextRequest) {
  try {
    const supabase = createServerSupabaseClient()
    const { data: { user }, error: authError } = await supabase.auth.getUser()

    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { today_emoji, tomorrow_emoji, later_emoji } = body

    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    const validEmojiNames = AVAILABLE_EMOJIS.map(e => e.name)
    if (!validEmojiNames.includes(today_emoji) ||
        !validEmojiNames.includes(tomorrow_emoji) ||
        !validEmojiNames.includes(later_emoji)) {
      return NextResponse.json({ error: 'Invalid emoji selection' }, { status: 400 })
    }

    // Ë®≠ÂÆö„ÇíÊõ¥Êñ∞ÔºàUPSERTÔºâ
    const { data, error } = await supabase
      .from('user_emoji_settings')
      .upsert({
        user_id: user.id,
        today_emoji,
        tomorrow_emoji,
        later_emoji
      })
      .select()
      .single()

    if (error) {
      return NextResponse.json({
        error: 'Failed to update settings',
        details: error.message
      }, { status: 500 })
    }

    return NextResponse.json({
      message: 'Settings updated successfully',
      settings: {
        today_emoji: data.today_emoji,
        tomorrow_emoji: data.tomorrow_emoji,
        later_emoji: data.later_emoji
      }
    })

  } catch (error) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function POST(_request: NextRequest) {
  try {
    const supabase = createServerSupabaseClient()
    const { data: { user }, error: authError } = await supabase.auth.getUser()

    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„Å´„É™„Çª„ÉÉ„Éà
    const { data, error } = await supabase
      .from('user_emoji_settings')
      .upsert({
        user_id: user.id,
        ...DEFAULT_EMOJIS
      })
      .select()
      .single()

    if (error) {
      return NextResponse.json({
        error: 'Failed to reset settings',
        details: error.message
      }, { status: 500 })
    }

    return NextResponse.json({
      message: 'Settings reset to default',
      settings: {
        today_emoji: data.today_emoji,
        tomorrow_emoji: data.tomorrow_emoji,
        later_emoji: data.later_emoji
      }
    })

  } catch (error) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
