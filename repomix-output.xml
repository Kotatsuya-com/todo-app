This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  api/
    generate-title/
      route.ts
  compare/
    page.tsx
  report/
    page.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  auth/
    AuthForm.tsx
  layout/
    Navigation.tsx
  providers/
    AuthProvider.tsx
  todo/
    CreateTodoModal.tsx
    TodoCard.tsx
  ui/
    Button.tsx
lib/
  supabase.ts
  utils.ts
store/
  todoStore.ts
types/
  index.ts
.env.local.example
.gitignore
middleware.ts
next.config.js
package.json
postcss.config.js
PROJECT_STRUCTURE.md
QUICKSTART.md
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/api/generate-title/route.ts">
import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    const { content } = await request.json()

    if (!content || typeof content !== 'string') {
      return NextResponse.json(
        { error: 'Content is required' },
        { status: 400 }
      )
    }

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: 'あなたはタスクの内容から簡潔で分かりやすい見出しを生成するアシスタントです。見出しは15文字以内で、タスクの本質を表すものにしてください。'
        },
        {
          role: 'user',
          content: `以下のタスクの内容から、簡潔な見出しを生成してください：\n\n${content}`
        }
      ],
      temperature: 0.7,
      max_tokens: 50,
    })

    const title = completion.choices[0]?.message?.content?.trim() || 'タスク'

    return NextResponse.json({ title })
  } catch (error: any) {
    console.error('Failed to generate title:', error)
    return NextResponse.json(
      { error: 'Failed to generate title' },
      { status: 500 }
    )
  }
}
</file>

<file path="app/compare/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useTodoStore } from '@/store/todoStore'
import { Todo, ComparisonPair } from '@/types'
import { Button } from '@/components/ui/Button'
import { ArrowLeft, ArrowRight, SkipForward, CheckCircle } from 'lucide-react'
import { TodoCard } from '@/components/todo/TodoCard'
import { redirect } from 'next/navigation'

export default function ComparePage() {
  const { user, todos, createComparison, fetchTodos } = useTodoStore()
  const [currentPair, setCurrentPair] = useState<ComparisonPair | null>(null)
  const [comparisonCount, setComparisonCount] = useState(0)
  const [remainingPairs, setRemainingPairs] = useState<ComparisonPair[]>([])

  useEffect(() => {
    if (!user) {
      redirect('/')
    }
    fetchTodos()
  }, [user, fetchTodos])

  useEffect(() => {
    // アクティブなTODOのみを対象に比較ペアを生成
    const activeTodos = todos.filter(todo => todo.status === 'open')
    const pairs: ComparisonPair[] = []
    
    // すべての組み合わせを生成（重複なし）
    for (let i = 0; i < activeTodos.length; i++) {
      for (let j = i + 1; j < activeTodos.length; j++) {
        pairs.push({
          left: activeTodos[i],
          right: activeTodos[j],
        })
      }
    }
    
    // ランダムに並べ替え
    const shuffled = pairs.sort(() => Math.random() - 0.5)
    setRemainingPairs(shuffled)
    
    if (shuffled.length > 0) {
      setCurrentPair(shuffled[0])
    }
  }, [todos])

  const handleChoice = async (winner: Todo, loser: Todo) => {
    await createComparison(winner.id, loser.id)
    setComparisonCount(prev => prev + 1)
    
    // 次のペアに進む
    const newRemainingPairs = remainingPairs.slice(1)
    setRemainingPairs(newRemainingPairs)
    
    if (newRemainingPairs.length > 0) {
      setCurrentPair(newRemainingPairs[0])
    } else {
      setCurrentPair(null)
    }
  }

  const handleSkip = () => {
    // 現在のペアをスキップして最後に回す
    const newRemainingPairs = [...remainingPairs.slice(1), remainingPairs[0]]
    setRemainingPairs(newRemainingPairs)
    setCurrentPair(newRemainingPairs[0])
  }

  const handleFinish = () => {
    redirect('/')
  }

  if (!user) {
    return null
  }

  if (!currentPair || remainingPairs.length === 0) {
    return (
      <div className="max-w-2xl mx-auto text-center py-12">
        <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
        <h2 className="text-2xl font-bold mb-4">
          {comparisonCount > 0 ? '比較完了！' : '比較するタスクがありません'}
        </h2>
        {comparisonCount > 0 && (
          <p className="text-gray-600 mb-6">
            {comparisonCount}回の比較を行いました。重要度スコアが更新されました。
          </p>
        )}
        <Button onClick={handleFinish}>
          ダッシュボードに戻る
        </Button>
      </div>
    )
  }

  return (
    <div className="max-w-6xl mx-auto">
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold mb-2">タスクの優先度比較</h2>
        <p className="text-gray-600">
          より重要だと思うタスクを選択してください
        </p>
        <p className="text-sm text-gray-500 mt-2">
          {comparisonCount}回比較済み / 残り{remainingPairs.length}ペア
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
        <div className="space-y-4">
          <div className="text-center">
            <h3 className="font-semibold text-lg mb-2">タスクA</h3>
          </div>
          <TodoCard todo={currentPair.left} />
          <Button
            variant="primary"
            size="lg"
            className="w-full flex items-center justify-center gap-2"
            onClick={() => handleChoice(currentPair.left, currentPair.right)}
          >
            <ArrowLeft className="w-5 h-5" />
            Aが重要
          </Button>
        </div>

        <div className="space-y-4">
          <div className="text-center">
            <h3 className="font-semibold text-lg mb-2">タスクB</h3>
          </div>
          <TodoCard todo={currentPair.right} />
          <Button
            variant="primary"
            size="lg"
            className="w-full flex items-center justify-center gap-2"
            onClick={() => handleChoice(currentPair.right, currentPair.left)}
          >
            Bが重要
            <ArrowRight className="w-5 h-5" />
          </Button>
        </div>
      </div>

      <div className="flex justify-center gap-4">
        <Button
          variant="secondary"
          onClick={handleSkip}
          className="flex items-center gap-2"
        >
          <SkipForward className="w-4 h-4" />
          スキップ
        </Button>
        <Button
          variant="secondary"
          onClick={handleFinish}
          className="flex items-center gap-2"
        >
          <CheckCircle className="w-4 h-4" />
          ここで終了
        </Button>
      </div>
    </div>
  )
}
</file>

<file path="app/report/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useTodoStore } from '@/store/todoStore'
import { createClient } from '@/lib/supabase'
import { Button } from '@/components/ui/Button'
import { Calendar, BarChart3, PieChart } from 'lucide-react'
import { format, startOfWeek, startOfMonth, endOfWeek, endOfMonth } from 'date-fns'
import { ja } from 'date-fns/locale'
import { PieChart as RechartsPC, Pie, Cell, ResponsiveContainer, Legend, Tooltip, BarChart, Bar, XAxis, YAxis, CartesianGrid } from 'recharts'
import { redirect } from 'next/navigation'

type TimeRange = 'day' | 'week' | 'month'

interface CompletionData {
  quadrant: string
  count: number
  todos: {
    title?: string
    body: string
    completed_at: string
  }[]
}

export default function ReportPage() {
  const { user } = useTodoStore()
  const [timeRange, setTimeRange] = useState<TimeRange>('week')
  const [completionData, setCompletionData] = useState<CompletionData[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (!user) {
      redirect('/')
    }
  }, [user])

  useEffect(() => {
    if (user) {
      fetchCompletionData()
    }
  }, [user, timeRange])

  const fetchCompletionData = async () => {
    setLoading(true)
    const supabase = createClient()
    
    // 期間の設定
    const now = new Date()
    let startDate: Date
    let endDate = new Date()
    
    switch (timeRange) {
      case 'day':
        startDate = new Date(now.setHours(0, 0, 0, 0))
        break
      case 'week':
        startDate = startOfWeek(now, { locale: ja })
        endDate = endOfWeek(now, { locale: ja })
        break
      case 'month':
        startDate = startOfMonth(now)
        endDate = endOfMonth(now)
        break
    }

    try {
      const { data, error } = await supabase
        .from('completion_log')
        .select(`
          quadrant,
          completed_at,
          todos (
            title,
            body
          )
        `)
        .gte('completed_at', startDate.toISOString())
        .lte('completed_at', endDate.toISOString())
        .order('completed_at', { ascending: false })

      if (error) throw error

      // データを四象限ごとに集計
      const aggregated = data?.reduce((acc: any, item: any) => {
        const quadrant = item.quadrant
        if (!acc[quadrant]) {
          acc[quadrant] = {
            quadrant,
            count: 0,
            todos: []
          }
        }
        acc[quadrant].count++
        acc[quadrant].todos.push({
          title: item.todos.title,
          body: item.todos.body,
          completed_at: item.completed_at
        })
        return acc
      }, {})

      const result = Object.values(aggregated || {}) as CompletionData[]
      setCompletionData(result)
    } catch (error) {
      console.error('Failed to fetch completion data:', error)
    } finally {
      setLoading(false)
    }
  }

  if (!user) {
    return null
  }

  const quadrantLabels: Record<string, string> = {
    urgent_important: '緊急×重要',
    not_urgent_important: '重要×緊急でない',
    urgent_not_important: '緊急×重要でない',
    not_urgent_not_important: '緊急でない×重要でない',
  }

  const quadrantColors: Record<string, string> = {
    urgent_important: '#ef4444',
    not_urgent_important: '#3b82f6',
    urgent_not_important: '#eab308',
    not_urgent_not_important: '#6b7280',
  }

  const pieData = completionData.map(item => ({
    name: quadrantLabels[item.quadrant] || item.quadrant,
    value: item.count,
    color: quadrantColors[item.quadrant] || '#6b7280'
  }))

  const totalCompleted = completionData.reduce((sum, item) => sum + item.count, 0)

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900">完了レポート</h2>
        
        <div className="flex gap-2">
          {(['day', 'week', 'month'] as TimeRange[]).map((range) => (
            <Button
              key={range}
              variant={timeRange === range ? 'primary' : 'secondary'}
              size="sm"
              onClick={() => setTimeRange(range)}
              className="flex items-center gap-1"
            >
              <Calendar className="w-3 h-3" />
              {range === 'day' ? '日' : range === 'week' ? '週' : '月'}
            </Button>
          ))}
        </div>
      </div>

      {loading ? (
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      ) : totalCompleted === 0 ? (
        <div className="text-center py-12">
          <p className="text-gray-500">この期間に完了したタスクはありません</p>
        </div>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-white rounded-lg shadow-soft p-6">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <PieChart className="w-5 h-5" />
                四象限別完了数
              </h3>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <RechartsPC>
                    <Pie
                      data={pieData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, value }) => `${name}: ${value}`}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {pieData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </RechartsPC>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-soft p-6">
              <h3 className="text-lg font-semibold mb-4">統計情報</h3>
              <div className="space-y-3">
                <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span className="text-gray-600">合計完了数</span>
                  <span className="text-2xl font-bold">{totalCompleted}</span>
                </div>
                {completionData.map((item) => (
                  <div key={item.quadrant} className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <div 
                        className="w-3 h-3 rounded-full" 
                        style={{ backgroundColor: quadrantColors[item.quadrant] }}
                      />
                      <span className="text-sm text-gray-600">
                        {quadrantLabels[item.quadrant]}
                      </span>
                    </div>
                    <span className="font-medium">{item.count}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-soft p-6">
            <h3 className="text-lg font-semibold mb-4">完了したタスク一覧</h3>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {completionData.flatMap(data => 
                data.todos.map((todo, index) => (
                  <div key={`${data.quadrant}-${index}`} className="border-b pb-3 last:border-0">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-900">
                          {todo.title || todo.body.substring(0, 50) + '...'}
                        </h4>
                        <p className="text-sm text-gray-600 mt-1">{todo.body}</p>
                      </div>
                      <div className="text-right ml-4">
                        <div 
                          className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                          style={{ 
                            backgroundColor: `${quadrantColors[data.quadrant]}20`,
                            color: quadrantColors[data.quadrant]
                          }}
                        >
                          {quadrantLabels[data.quadrant]}
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                          {format(new Date(todo.completed_at), 'MM/dd HH:mm', { locale: ja })}
                        </p>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </>
      )}
    </div>
  )
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-gray-100;
}

::-webkit-scrollbar-thumb {
  @apply bg-gray-300 rounded-full;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-gray-400;
}

/* Animations */
@keyframes slideIn {
  from {
    transform: translateY(-10px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.animate-slide-in {
  animation: slideIn 0.3s ease-out;
}

.animate-fade-in {
  animation: fadeIn 0.3s ease-out;
}

/* Custom utility classes */
.glass {
  @apply bg-white/80 backdrop-blur-sm;
}

.shadow-soft {
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}
</file>

<file path="app/layout.tsx">
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { Navigation } from '@/components/layout/Navigation'
import { AuthProvider } from '@/components/providers/AuthProvider'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'TODO管理アプリ',
  description: 'Slack連携TODO管理アプリケーション',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ja">
      <body className={inter.className}>
        <AuthProvider>
          <div className="min-h-screen bg-gray-50">
            <Navigation />
            <main className="container mx-auto px-4 pt-20 pb-8">
              {children}
            </main>
          </div>
        </AuthProvider>
      </body>
    </html>
  )
}
</file>

<file path="app/page.tsx">
'use client'

import { useEffect, useState } from 'react'
import { useTodoStore } from '@/store/todoStore'
import { TodoCard } from '@/components/todo/TodoCard'
import { Button } from '@/components/ui/Button'
import { Grid3x3, List, Filter } from 'lucide-react'
import { getQuadrant, isOverdue } from '@/lib/utils'
import { AuthForm } from '@/components/auth/AuthForm'
import { Todo } from '@/types'

export default function DashboardPage() {
  const { user, todos, loading, fetchTodos } = useTodoStore()
  const [viewMode, setViewMode] = useState<'matrix' | 'list'>('matrix')
  const [showOverdueOnly, setShowOverdueOnly] = useState(false)

  useEffect(() => {
    if (user) {
      fetchTodos()
    }
  }, [user, fetchTodos])

  if (!user) {
    return <AuthForm />
  }

  const activeTodos = todos.filter(todo => todo.status === 'open')
  const displayTodos = showOverdueOnly 
    ? activeTodos.filter(todo => isOverdue(todo.deadline))
    : activeTodos

  const quadrants = {
    urgent_important: displayTodos.filter(todo => getQuadrant(todo.urgency, todo.importance_score) === 'urgent_important'),
    not_urgent_important: displayTodos.filter(todo => getQuadrant(todo.urgency, todo.importance_score) === 'not_urgent_important'),
    urgent_not_important: displayTodos.filter(todo => getQuadrant(todo.urgency, todo.importance_score) === 'urgent_not_important'),
    not_urgent_not_important: displayTodos.filter(todo => getQuadrant(todo.urgency, todo.importance_score) === 'not_urgent_not_important'),
  }

  const quadrantInfo = {
    urgent_important: { title: '緊急×重要', color: 'bg-red-50 border-red-200' },
    not_urgent_important: { title: '重要×緊急でない', color: 'bg-blue-50 border-blue-200' },
    urgent_not_important: { title: '緊急×重要でない', color: 'bg-yellow-50 border-yellow-200' },
    not_urgent_not_important: { title: '緊急でない×重要でない', color: 'bg-gray-50 border-gray-200' },
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900">タスク一覧</h2>
        
        <div className="flex items-center gap-3">
          <Button
            variant={showOverdueOnly ? 'primary' : 'secondary'}
            size="sm"
            onClick={() => setShowOverdueOnly(!showOverdueOnly)}
            className="flex items-center gap-2"
          >
            <Filter className="w-4 h-4" />
            期限切れのみ
          </Button>
          
          <div className="flex bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setViewMode('matrix')}
              className={`p-2 rounded ${viewMode === 'matrix' ? 'bg-white shadow-sm' : ''}`}
            >
              <Grid3x3 className="w-4 h-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`p-2 rounded ${viewMode === 'list' ? 'bg-white shadow-sm' : ''}`}
            >
              <List className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {loading ? (
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      ) : displayTodos.length === 0 ? (
        <div className="text-center py-12">
          <p className="text-gray-500">
            {showOverdueOnly ? '期限切れのタスクはありません' : 'タスクがありません'}
          </p>
        </div>
      ) : viewMode === 'matrix' ? (
        <div className="grid grid-cols-2 gap-4">
          {Object.entries(quadrants).map(([key, todos]) => (
            <div
              key={key}
              className={`rounded-lg border-2 p-4 min-h-[300px] ${quadrantInfo[key as keyof typeof quadrantInfo].color}`}
            >
              <h3 className="font-semibold text-gray-700 mb-3">
                {quadrantInfo[key as keyof typeof quadrantInfo].title}
              </h3>
              <div className="space-y-3">
                {todos.map(todo => (
                  <TodoCard key={todo.id} todo={todo} />
                ))}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="space-y-3">
          {displayTodos
            .sort((a, b) => {
              // 重要度でソート（降順）
              if (b.importance_score !== a.importance_score) {
                return b.importance_score - a.importance_score
              }
              // 期限でソート（昇順）
              if (a.deadline && b.deadline) {
                return new Date(a.deadline).getTime() - new Date(b.deadline).getTime()
              }
              return 0
            })
            .map(todo => (
              <TodoCard key={todo.id} todo={todo} />
            ))}
        </div>
      )}
    </div>
  )
}
</file>

<file path="components/auth/AuthForm.tsx">
'use client'

import { useState } from 'react'
import { createClient } from '@/lib/supabase'
import { Button } from '@/components/ui/Button'
import { Mail, Lock, AlertCircle } from 'lucide-react'

export function AuthForm() {
  const [isSignUp, setIsSignUp] = useState(false)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError(null)
    setSuccess(null)

    const supabase = createClient()

    try {
      if (isSignUp) {
        const { error } = await supabase.auth.signUp({
          email,
          password,
        })
        if (error) throw error
        setSuccess('確認メールを送信しました。メールをご確認ください。')
      } else {
        const { error } = await supabase.auth.signInWithPassword({
          email,
          password,
        })
        if (error) throw error
      }
    } catch (error: any) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-[calc(100vh-5rem)] flex items-center justify-center">
      <div className="w-full max-w-md">
        <div className="bg-white rounded-lg shadow-lg p-8">
          <h2 className="text-2xl font-bold text-center mb-8">
            {isSignUp ? 'アカウント作成' : 'ログイン'}
          </h2>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                メールアドレス
              </label>
              <div className="relative">
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="your@email.com"
                  required
                />
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                パスワード
              </label>
              <div className="relative">
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="••••••••"
                  minLength={6}
                  required
                />
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              </div>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3 flex items-start gap-2">
                <AlertCircle className="w-4 h-4 text-red-600 mt-0.5" />
                <p className="text-sm text-red-600">{error}</p>
              </div>
            )}

            {success && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                <p className="text-sm text-green-600">{success}</p>
              </div>
            )}

            <Button
              type="submit"
              variant="primary"
              className="w-full"
              disabled={loading}
            >
              {loading ? '処理中...' : isSignUp ? 'アカウント作成' : 'ログイン'}
            </Button>
          </form>

          <div className="mt-6 text-center">
            <button
              onClick={() => {
                setIsSignUp(!isSignUp)
                setError(null)
                setSuccess(null)
              }}
              className="text-sm text-blue-600 hover:underline"
            >
              {isSignUp ? 'すでにアカウントをお持ちの方はこちら' : 'アカウントをお持ちでない方はこちら'}
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/layout/Navigation.tsx">
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Plus, ClipboardList, BarChart3, Scale } from 'lucide-react'
import { Button } from '@/components/ui/Button'
import { CreateTodoModal } from '@/components/todo/CreateTodoModal'
import { useState } from 'react'
import { useTodoStore } from '@/store/todoStore'

export function Navigation() {
  const pathname = usePathname()
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const { user } = useTodoStore()

  const tabs = [
    { name: 'ダッシュボード', href: '/', icon: ClipboardList },
    { name: '優先度比較', href: '/compare', icon: Scale },
    { name: 'レポート', href: '/report', icon: BarChart3 },
  ]

  return (
    <>
      <nav className="fixed top-0 left-0 right-0 z-50 bg-white border-b border-gray-200">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-8">
              <h1 className="text-xl font-bold text-gray-900">TODO管理</h1>
              
              {user && (
                <div className="flex space-x-1">
                  {tabs.map((tab) => {
                    const Icon = tab.icon
                    const isActive = pathname === tab.href
                    
                    return (
                      <Link
                        key={tab.href}
                        href={tab.href}
                        className={`
                          flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium
                          transition-colors duration-200
                          ${isActive 
                            ? 'bg-blue-50 text-blue-600' 
                            : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                          }
                        `}
                      >
                        <Icon className="w-4 h-4" />
                        <span>{tab.name}</span>
                      </Link>
                    )
                  })}
                </div>
              )}
            </div>

            {user && (
              <Button
                onClick={() => setIsCreateModalOpen(true)}
                className="flex items-center space-x-2"
              >
                <Plus className="w-4 h-4" />
                <span>新規タスク</span>
              </Button>
            )}
          </div>
        </div>
      </nav>

      <CreateTodoModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
      />
    </>
  )
}
</file>

<file path="components/providers/AuthProvider.tsx">
'use client'

import { useEffect } from 'react'
import { createClient } from '@/lib/supabase'
import { useTodoStore } from '@/store/todoStore'

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const { setUser, fetchTodos } = useTodoStore()

  useEffect(() => {
    const supabase = createClient()

    // 初期認証状態をチェック
    supabase.auth.getSession().then(({ data: { session } }) => {
      if (session?.user) {
        setUser({
          id: session.user.id,
          display_name: session.user.email?.split('@')[0],
          avatar_url: session.user.user_metadata?.avatar_url,
          created_at: session.user.created_at,
        })
        fetchTodos()
      }
    })

    // 認証状態の変更を監視
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      if (session?.user) {
        setUser({
          id: session.user.id,
          display_name: session.user.email?.split('@')[0],
          avatar_url: session.user.user_metadata?.avatar_url,
          created_at: session.user.created_at,
        })
        fetchTodos()
      } else {
        setUser(null)
      }
    })

    return () => subscription.unsubscribe()
  }, [setUser, fetchTodos])

  return <>{children}</>
}
</file>

<file path="components/todo/CreateTodoModal.tsx">
'use client'

import { useState } from 'react'
import * as Dialog from '@radix-ui/react-dialog'
import * as Select from '@radix-ui/react-select'
import { X, ChevronDown, Sparkles, Calendar } from 'lucide-react'
import { Button } from '@/components/ui/Button'
import { useTodoStore } from '@/store/todoStore'
import { Urgency } from '@/types'
import { getDeadlineFromUrgency } from '@/lib/utils'

interface CreateTodoModalProps {
  isOpen: boolean
  onClose: () => void
}

export function CreateTodoModal({ isOpen, onClose }: CreateTodoModalProps) {
  const { createTodo } = useTodoStore()
  const [body, setBody] = useState('')
  const [title, setTitle] = useState('')
  const [urgency, setUrgency] = useState<Urgency>('today')
  const [deadline, setDeadline] = useState<string>('')
  const [isGeneratingTitle, setIsGeneratingTitle] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!body.trim()) return

    setIsSubmitting(true)
    try {
      await createTodo({
        body: body.trim(),
        title: title.trim() || undefined,
        urgency,
        deadline: deadline || getDeadlineFromUrgency(urgency),
      })
      
      // Reset form
      setBody('')
      setTitle('')
      setUrgency('today')
      setDeadline('')
      onClose()
    } finally {
      setIsSubmitting(false)
    }
  }

  const generateTitle = async () => {
    if (!body.trim()) return

    setIsGeneratingTitle(true)
    try {
      const response = await fetch('/api/generate-title', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content: body }),
      })
      
      if (response.ok) {
        const data = await response.json()
        setTitle(data.title)
      }
    } catch (error) {
      console.error('Failed to generate title:', error)
    } finally {
      setIsGeneratingTitle(false)
    }
  }

  return (
    <Dialog.Root open={isOpen} onOpenChange={onClose}>
      <Dialog.Portal>
        <Dialog.Overlay className="fixed inset-0 bg-black/50 animate-fade-in" />
        <Dialog.Content className="fixed top-[50%] left-[50%] translate-x-[-50%] translate-y-[-50%] w-full max-w-md bg-white rounded-lg shadow-xl animate-slide-in">
          <div className="flex items-center justify-between p-6 border-b">
            <Dialog.Title className="text-lg font-semibold">
              新規タスク作成
            </Dialog.Title>
            <Dialog.Close asChild>
              <button className="text-gray-400 hover:text-gray-600">
                <X className="w-5 h-5" />
              </button>
            </Dialog.Close>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                本文 <span className="text-red-500">*</span>
              </label>
              <textarea
                value={body}
                onChange={(e) => setBody(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                rows={4}
                placeholder="タスクの内容を入力してください..."
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                見出し
              </label>
              <div className="flex gap-2">
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="見出しを入力（省略可）"
                />
                <Button
                  type="button"
                  variant="secondary"
                  onClick={generateTitle}
                  disabled={!body.trim() || isGeneratingTitle}
                >
                  <Sparkles className="w-4 h-4 mr-1" />
                  生成
                </Button>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  緊急度
                </label>
                <Select.Root value={urgency} onValueChange={(value) => setUrgency(value as Urgency)}>
                  <Select.Trigger className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center justify-between">
                    <Select.Value />
                    <ChevronDown className="w-4 h-4 text-gray-400" />
                  </Select.Trigger>
                  <Select.Portal>
                    <Select.Content className="bg-white border border-gray-300 rounded-lg shadow-lg">
                      <Select.Viewport className="p-1">
                        <Select.Item value="now" className="px-3 py-2 hover:bg-gray-100 rounded cursor-pointer">
                          <Select.ItemText>今すぐ</Select.ItemText>
                        </Select.Item>
                        <Select.Item value="today" className="px-3 py-2 hover:bg-gray-100 rounded cursor-pointer">
                          <Select.ItemText>今日中</Select.ItemText>
                        </Select.Item>
                        <Select.Item value="tomorrow" className="px-3 py-2 hover:bg-gray-100 rounded cursor-pointer">
                          <Select.ItemText>明日</Select.ItemText>
                        </Select.Item>
                        <Select.Item value="later" className="px-3 py-2 hover:bg-gray-100 rounded cursor-pointer">
                          <Select.ItemText>それより後</Select.ItemText>
                        </Select.Item>
                      </Select.Viewport>
                    </Select.Content>
                  </Select.Portal>
                </Select.Root>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  期限日
                </label>
                <div className="relative">
                  <input
                    type="date"
                    value={deadline}
                    onChange={(e) => setDeadline(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <Calendar className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400 pointer-events-none" />
                </div>
              </div>
            </div>

            <div className="flex gap-3 pt-4">
              <Button
                type="button"
                variant="secondary"
                onClick={onClose}
                className="flex-1"
              >
                キャンセル
              </Button>
              <Button
                type="submit"
                variant="primary"
                disabled={!body.trim() || isSubmitting}
                className="flex-1"
              >
                作成
              </Button>
            </div>
          </form>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  )
}
</file>

<file path="components/todo/TodoCard.tsx">
'use client'

import { Todo } from '@/types'
import { Button } from '@/components/ui/Button'
import { Check, Edit2, Trash2, Calendar, AlertCircle } from 'lucide-react'
import { formatDeadline, isOverdue, linkifyText } from '@/lib/utils'
import { useTodoStore } from '@/store/todoStore'
import { useState } from 'react'

interface TodoCardProps {
  todo: Todo
  onEdit?: () => void
}

export function TodoCard({ todo, onEdit }: TodoCardProps) {
  const { completeTodo, deleteTodo, updateTodo } = useTodoStore()
  const [isDeleting, setIsDeleting] = useState(false)
  const overdue = isOverdue(todo.deadline)

  const handleComplete = async () => {
    await completeTodo(todo.id)
  }

  const handleDelete = async () => {
    if (window.confirm('このタスクを削除してもよろしいですか？')) {
      setIsDeleting(true)
      await deleteTodo(todo.id)
    }
  }

  const handleExtendDeadline = async () => {
    const tomorrow = new Date()
    tomorrow.setDate(tomorrow.getDate() + 1)
    await updateTodo(todo.id, { deadline: tomorrow.toISOString().split('T')[0] })
  }

  const urgencyColors = {
    now: 'bg-red-100 text-red-800',
    today: 'bg-orange-100 text-orange-800',
    tomorrow: 'bg-yellow-100 text-yellow-800',
    later: 'bg-gray-100 text-gray-800',
  }

  const urgencyLabels = {
    now: '今すぐ',
    today: '今日中',
    tomorrow: '明日',
    later: 'それより後',
  }

  return (
    <div className={`
      bg-white rounded-lg shadow-soft p-4 transition-all duration-200
      ${todo.status === 'done' ? 'opacity-60' : ''}
      ${overdue ? 'border-2 border-red-300' : 'border border-gray-200'}
      ${isDeleting ? 'scale-95 opacity-50' : 'hover:shadow-md'}
    `}>
      {todo.title && (
        <h3 className="font-semibold text-gray-900 mb-2">{todo.title}</h3>
      )}
      
      <div 
        className="text-gray-600 mb-3 prose prose-sm max-w-none"
        dangerouslySetInnerHTML={{ __html: linkifyText(todo.body) }}
      />

      <div className="flex items-center gap-2 mb-3">
        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${urgencyColors[todo.urgency]}`}>
          {urgencyLabels[todo.urgency]}
        </span>
        
        {todo.deadline && (
          <span className={`inline-flex items-center gap-1 text-sm ${overdue ? 'text-red-600 font-medium' : 'text-gray-500'}`}>
            <Calendar className="w-3 h-3" />
            {formatDeadline(todo.deadline)}
            {overdue && <AlertCircle className="w-3 h-3" />}
          </span>
        )}
      </div>

      <div className="flex items-center gap-2">
        {todo.status === 'open' && (
          <>
            {overdue ? (
              <>
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={handleExtendDeadline}
                  className="flex-1"
                >
                  期限延長
                </Button>
                <Button
                  size="sm"
                  variant="destructive"
                  onClick={handleDelete}
                  className="flex-1"
                >
                  削除
                </Button>
              </>
            ) : (
              <>
                <Button
                  size="sm"
                  variant="primary"
                  onClick={handleComplete}
                  className="flex items-center gap-1"
                >
                  <Check className="w-3 h-3" />
                  完了
                </Button>
                {onEdit && (
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={onEdit}
                  >
                    <Edit2 className="w-3 h-3" />
                  </Button>
                )}
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={handleDelete}
                >
                  <Trash2 className="w-3 h-3" />
                </Button>
              </>
            )}
          </>
        )}
      </div>
    </div>
  )
}
</file>

<file path="components/ui/Button.tsx">
import { forwardRef, ButtonHTMLAttributes } from 'react'
import { cn } from '@/lib/utils'

export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'destructive' | 'ghost'
  size?: 'sm' | 'md' | 'lg'
}

export const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'primary', size = 'md', ...props }, ref) => {
    const baseStyles = 'inline-flex items-center justify-center rounded-lg font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50'
    
    const variants = {
      primary: 'bg-blue-600 text-white hover:bg-blue-700 focus-visible:ring-blue-600',
      secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200 focus-visible:ring-gray-400',
      destructive: 'bg-red-600 text-white hover:bg-red-700 focus-visible:ring-red-600',
      ghost: 'hover:bg-gray-100 hover:text-gray-900 focus-visible:ring-gray-400',
    }
    
    const sizes = {
      sm: 'h-8 px-3 text-sm',
      md: 'h-10 px-4',
      lg: 'h-12 px-6 text-lg',
    }
    
    return (
      <button
        ref={ref}
        className={cn(baseStyles, variants[variant], sizes[size], className)}
        {...props}
      />
    )
  }
)

Button.displayName = 'Button'
</file>

<file path="lib/supabase.ts">
import { createBrowserClient } from '@supabase/ssr'
import { type SupabaseClient } from '@supabase/supabase-js'

export function createClient(): SupabaseClient {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}

// サーバーサイド用のクライアント作成関数
export function createServerClient(cookieStore: any): SupabaseClient {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          cookieStore.set({ name, value, ...options })
        },
        remove(name: string, options: any) {
          cookieStore.set({ name, value: '', ...options })
        },
      },
    }
  )
}
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'
import { Urgency, Quadrant } from '@/types'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function getDeadlineFromUrgency(urgency: Urgency): string | undefined {
  const now = new Date()
  
  switch (urgency) {
    case 'now':
    case 'today':
      return now.toISOString().split('T')[0]
    case 'tomorrow':
      now.setDate(now.getDate() + 1)
      return now.toISOString().split('T')[0]
    case 'later':
      return undefined
  }
}

export function getQuadrant(urgency: Urgency, importanceScore: number): Quadrant {
  const isUrgent = urgency === 'now' || urgency === 'today'
  const isImportant = importanceScore > 0.5
  
  if (isUrgent && isImportant) return 'urgent_important'
  if (!isUrgent && isImportant) return 'not_urgent_important'
  if (isUrgent && !isImportant) return 'urgent_not_important'
  return 'not_urgent_not_important'
}

export function formatDeadline(deadline?: string): string {
  if (!deadline) return '期限なし'
  
  const date = new Date(deadline)
  const today = new Date()
  today.setHours(0, 0, 0, 0)
  date.setHours(0, 0, 0, 0)
  
  const diffDays = Math.floor((date.getTime() - today.getTime()) / (1000 * 60 * 60 * 24))
  
  if (diffDays < 0) return `${Math.abs(diffDays)}日遅れ`
  if (diffDays === 0) return '今日'
  if (diffDays === 1) return '明日'
  if (diffDays < 7) return `${diffDays}日後`
  
  return date.toLocaleDateString('ja-JP')
}

export function isOverdue(deadline?: string): boolean {
  if (!deadline) return false
  
  const date = new Date(deadline)
  const today = new Date()
  today.setHours(0, 0, 0, 0)
  date.setHours(0, 0, 0, 0)
  
  return date < today
}

export function extractUrls(text: string): string[] {
  const urlRegex = /(https?:\/\/[^\s]+)/g
  return text.match(urlRegex) || []
}

export function linkifyText(text: string): string {
  const urlRegex = /(https?:\/\/[^\s]+)/g
  return text.replace(urlRegex, '<a href="$1" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">$1</a>')
}
</file>

<file path="store/todoStore.ts">
import { create } from 'zustand'
import { Todo, User, Comparison } from '@/types'
import { createClient } from '@/lib/supabase'
import { format } from 'date-fns'

interface TodoStore {
  user: User | null
  todos: Todo[]
  comparisons: Comparison[]
  loading: boolean
  error: string | null
  
  // Actions
  setUser: (user: User | null) => void
  fetchTodos: () => Promise<void>
  createTodo: (todo: Partial<Todo>) => Promise<void>
  updateTodo: (id: string, updates: Partial<Todo>) => Promise<void>
  deleteTodo: (id: string) => Promise<void>
  completeTodo: (id: string) => Promise<void>
  fetchComparisons: () => Promise<void>
  createComparison: (winnerId: string, loserId: string) => Promise<void>
  updateImportanceScores: () => Promise<void>
}

export const useTodoStore = create<TodoStore>((set, get) => ({
  user: null,
  todos: [],
  comparisons: [],
  loading: false,
  error: null,

  setUser: (user) => set({ user }),

  fetchTodos: async () => {
    set({ loading: true, error: null })
    try {
      const supabase = createClient()
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        set({ todos: [], loading: false })
        return
      }

      const { data, error } = await supabase
        .from('todos')
        .select('*')
        .eq('user_id', user.id)
        .order('importance_score', { ascending: false })
        .order('deadline', { ascending: true })

      if (error) throw error
      set({ todos: data || [], loading: false })
    } catch (error: any) {
      set({ error: error.message, loading: false })
    }
  },

  createTodo: async (todo) => {
    set({ loading: true, error: null })
    try {
      const supabase = createClient()
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) throw new Error('User not authenticated')

      // 緊急度に基づいて期限を自動設定
      let deadline = todo.deadline
      if (!deadline && todo.urgency !== 'later') {
        const now = new Date()
        switch (todo.urgency) {
          case 'now':
          case 'today':
            deadline = format(now, 'yyyy-MM-dd')
            break
          case 'tomorrow':
            now.setDate(now.getDate() + 1)
            deadline = format(now, 'yyyy-MM-dd')
            break
        }
      }

      const { data, error } = await supabase
        .from('todos')
        .insert({
          ...todo,
          user_id: user.id,
          deadline,
          status: 'open'
        })
        .select()
        .single()

      if (error) throw error
      set(state => ({ todos: [...state.todos, data], loading: false }))
    } catch (error: any) {
      set({ error: error.message, loading: false })
    }
  },

  updateTodo: async (id, updates) => {
    set({ loading: true, error: null })
    try {
      const supabase = createClient()
      
      const { data, error } = await supabase
        .from('todos')
        .update(updates)
        .eq('id', id)
        .select()
        .single()

      if (error) throw error
      set(state => ({
        todos: state.todos.map(todo => todo.id === id ? data : todo),
        loading: false
      }))
    } catch (error: any) {
      set({ error: error.message, loading: false })
    }
  },

  deleteTodo: async (id) => {
    set({ loading: true, error: null })
    try {
      const supabase = createClient()
      
      const { error } = await supabase
        .from('todos')
        .delete()
        .eq('id', id)

      if (error) throw error
      set(state => ({
        todos: state.todos.filter(todo => todo.id !== id),
        loading: false
      }))
    } catch (error: any) {
      set({ error: error.message, loading: false })
    }
  },

  completeTodo: async (id) => {
    set({ loading: true, error: null })
    try {
      const supabase = createClient()
      const todo = get().todos.find(t => t.id === id)
      
      if (!todo) throw new Error('Todo not found')

      // TODOを完了状態に更新
      const { error: updateError } = await supabase
        .from('todos')
        .update({
          status: 'done',
          completed_at: new Date().toISOString()
        })
        .eq('id', id)

      if (updateError) throw updateError

      // 四象限を判定
      const isUrgent = todo.urgency === 'now' || todo.urgency === 'today'
      const isImportant = todo.importance_score > 0.5
      const quadrant = 
        isUrgent && isImportant ? 'urgent_important' :
        !isUrgent && isImportant ? 'not_urgent_important' :
        isUrgent && !isImportant ? 'urgent_not_important' :
        'not_urgent_not_important'

      // completion_logに記録
      const { error: logError } = await supabase
        .from('completion_log')
        .insert({
          todo_id: id,
          quadrant,
          completed_at: new Date().toISOString()
        })

      if (logError) throw logError

      set(state => ({
        todos: state.todos.map(todo => 
          todo.id === id 
            ? { ...todo, status: 'done' as const, completed_at: new Date().toISOString() }
            : todo
        ),
        loading: false
      }))
    } catch (error: any) {
      set({ error: error.message, loading: false })
    }
  },

  fetchComparisons: async () => {
    try {
      const supabase = createClient()
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) return

      const { data, error } = await supabase
        .from('comparisons')
        .select('*')
        .eq('user_id', user.id)

      if (error) throw error
      set({ comparisons: data || [] })
    } catch (error: any) {
      set({ error: error.message })
    }
  },

  createComparison: async (winnerId, loserId) => {
    try {
      const supabase = createClient()
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) throw new Error('User not authenticated')

      const { data, error } = await supabase
        .from('comparisons')
        .insert({
          user_id: user.id,
          winner_id: winnerId,
          loser_id: loserId
        })
        .select()
        .single()

      if (error) throw error
      set(state => ({ comparisons: [...state.comparisons, data] }))
      
      // 重要度スコアを更新
      await get().updateImportanceScores()
    } catch (error: any) {
      set({ error: error.message })
    }
  },

  updateImportanceScores: async () => {
    // 簡易的なEloレーティングシステムを実装
    const todos = get().todos
    const comparisons = get().comparisons
    const K = 32 // K-factor

    // 各TODOのスコアを初期化
    const scores = new Map<string, number>()
    todos.forEach(todo => scores.set(todo.id, todo.importance_score || 0.5))

    // 比較結果に基づいてスコアを更新
    comparisons.forEach(comp => {
      const winnerScore = scores.get(comp.winner_id) || 0.5
      const loserScore = scores.get(comp.loser_id) || 0.5

      // 期待値を計算
      const expectedWinner = 1 / (1 + Math.pow(10, (loserScore - winnerScore) / 0.4))
      const expectedLoser = 1 - expectedWinner

      // スコアを更新
      scores.set(comp.winner_id, winnerScore + K * (1 - expectedWinner))
      scores.set(comp.loser_id, loserScore + K * (0 - expectedLoser))
    })

    // スコアを正規化（0-1の範囲に）
    const minScore = Math.min(...scores.values())
    const maxScore = Math.max(...scores.values())
    const range = maxScore - minScore || 1

    // データベースを更新
    const supabase = createClient()
    for (const [todoId, score] of scores.entries()) {
      const normalizedScore = (score - minScore) / range
      await supabase
        .from('todos')
        .update({ importance_score: normalizedScore })
        .eq('id', todoId)
    }

    // ローカルステートを更新
    await get().fetchTodos()
  }
}))
</file>

<file path="types/index.ts">
export type Urgency = 'now' | 'today' | 'tomorrow' | 'later';
export type Status = 'open' | 'done';
export type Quadrant = 'urgent_important' | 'not_urgent_important' | 'urgent_not_important' | 'not_urgent_not_important';

export interface User {
  id: string;
  display_name?: string;
  avatar_url?: string;
  created_at: string;
}

export interface Todo {
  id: string;
  user_id: string;
  title?: string;
  body: string;
  urgency: Urgency;
  deadline?: string;
  importance_score: number;
  status: Status;
  created_at: string;
  completed_at?: string;
}

export interface Comparison {
  id: string;
  user_id: string;
  winner_id: string;
  loser_id: string;
  created_at: string;
}

export interface CompletionLog {
  id: string;
  todo_id: string;
  quadrant: Quadrant;
  completed_at: string;
}

export interface TodoWithQuadrant extends Todo {
  quadrant: Quadrant;
}

export interface ComparisonPair {
  left: Todo;
  right: Todo;
}
</file>

<file path=".env.local.example">
# Supabase
NEXT_PUBLIC_SUPABASE_URL=your-project-url-here
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here

# OpenAI
OPENAI_API_KEY=your-openai-api-key-here

# App
NEXT_PUBLIC_APP_URL=http://localhost:3000
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="middleware.ts">
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })

  const {
    data: { session },
  } = await supabase.auth.getSession()

  // 保護されたルートのチェック
  const protectedPaths = ['/compare', '/report']
  const isProtectedPath = protectedPaths.some(path => req.nextUrl.pathname.startsWith(path))

  if (isProtectedPath && !session) {
    // 未認証の場合はホームページにリダイレクト
    return NextResponse.redirect(new URL('/', req.url))
  }

  return res
}

// Middlewareが実行されるパスを指定
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - api (API routes)
     */
    '/((?!_next/static|_next/image|favicon.ico|api).*)',
  ],
}
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverActions: true,
  },
  images: {
    domains: ['localhost'],
  },
}

module.exports = nextConfig
</file>

<file path="package.json">
{
  "name": "todo-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toggle": "^1.0.3",
    "@supabase/auth-helpers-nextjs": "^0.8.7",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.39.7",
    "clsx": "^2.1.0",
    "date-fns": "^3.3.1",
    "lucide-react": "^0.303.0",
    "next": "^14.2.30",
    "openai": "^4.24.7",
    "react": "^18",
    "react-dom": "^18",
    "recharts": "^2.10.4",
    "tailwind-merge": "^2.2.0",
    "zustand": "^4.5.0"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.10",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.1.0",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="PROJECT_STRUCTURE.md">
# プロジェクト構造

```
todo-app/
├── app/                          # Next.js App Router
│   ├── api/                      # APIルート
│   │   └── generate-title/       # LLM見出し生成API
│   │       └── route.ts
│   ├── compare/                  # 優先度比較画面
│   │   └── page.tsx
│   ├── report/                   # レポート画面
│   │   └── page.tsx
│   ├── globals.css              # グローバルCSS
│   ├── layout.tsx               # ルートレイアウト
│   └── page.tsx                 # ダッシュボード（ホーム）
│
├── components/                   # Reactコンポーネント
│   ├── auth/                    # 認証関連
│   │   └── AuthForm.tsx         # ログイン/サインアップフォーム
│   ├── layout/                  # レイアウトコンポーネント
│   │   └── Navigation.tsx       # ナビゲーションバー
│   ├── providers/               # コンテキストプロバイダー
│   │   └── AuthProvider.tsx     # 認証プロバイダー
│   ├── todo/                    # TODO関連コンポーネント
│   │   ├── CreateTodoModal.tsx  # TODO作成モーダル
│   │   └── TodoCard.tsx         # TODOカード
│   └── ui/                      # 汎用UIコンポーネント
│       └── Button.tsx           # ボタンコンポーネント
│
├── lib/                         # ライブラリ・ユーティリティ
│   ├── supabase.ts             # Supabaseクライアント設定
│   └── utils.ts                # ユーティリティ関数
│
├── store/                       # 状態管理
│   └── todoStore.ts            # Zustand store
│
├── types/                       # TypeScript型定義
│   └── index.ts                # 共通型定義
│
├── .env.local.example          # 環境変数テンプレート
├── .gitignore                  # Git除外設定
├── middleware.ts               # Next.js middleware（認証保護）
├── next.config.js              # Next.js設定
├── package.json                # 依存関係
├── postcss.config.js           # PostCSS設定
├── README.md                   # プロジェクトREADME
├── tailwind.config.js          # Tailwind CSS設定
└── tsconfig.json               # TypeScript設定
```

## 主要な機能モジュール

### 認証システム
- `middleware.ts`: ルート保護
- `components/auth/AuthForm.tsx`: ログイン/サインアップUI
- `components/providers/AuthProvider.tsx`: 認証状態管理

### TODO管理
- `store/todoStore.ts`: TODO状態管理（CRUD操作）
- `components/todo/TodoCard.tsx`: TODO表示・操作
- `components/todo/CreateTodoModal.tsx`: TODO作成

### 優先度管理
- `app/compare/page.tsx`: 比較インターフェース
- Eloレーティングシステムによる重要度スコア計算

### レポート機能
- `app/report/page.tsx`: 完了タスクの統計表示
- 四象限分析とグラフ表示

## データフロー

1. **認証フロー**
   - Supabase Auth → AuthProvider → 各コンポーネント

2. **TODO操作フロー**
   - UI操作 → Zustand Store → Supabase DB → UI更新

3. **LLM連携フロー**
   - TODO本文 → API Route → OpenAI API → 見出し生成

## 開発のヒント

- 新しいコンポーネントは`components/`の適切なサブディレクトリに配置
- API関連の処理は`app/api/`に配置
- 共通の型定義は`types/index.ts`に追加
- ユーティリティ関数は`lib/utils.ts`に追加
</file>

<file path="QUICKSTART.md">
# 🚀 クイックスタートガイド

このガイドでは、TODO管理アプリを最速でセットアップして起動する方法を説明します。

## 前提条件のチェックリスト

- [ ] Node.js 18以上がインストールされている
- [ ] npmまたはyarnが使用可能
- [ ] Supabaseアカウントを持っている
- [ ] OpenAIアカウントとAPIキーを持っている

## ステップ1: プロジェクトのセットアップ（5分）

```bash
# 1. プロジェクトディレクトリを作成
mkdir todo-app && cd todo-app

# 2. 必要なファイルをすべてコピー
# （提供されたファイルをプロジェクトディレクトリに配置）

# 3. 依存関係をインストール
npm install
```

## ステップ2: Supabaseプロジェクトの作成（10分）

1. [Supabase Dashboard](https://app.supabase.com)にログイン
2. 「New project」をクリック
3. プロジェクト名とパスワードを設定
4. 地域を選択（東京推奨）して作成

### データベースセットアップ

1. 左メニューの「SQL Editor」をクリック
2. 以下のSQLを実行：

```sql
-- 全てのテーブルとRLSポリシーを一度に作成
-- usersテーブル
CREATE TABLE users (
  id UUID PRIMARY KEY REFERENCES auth.users(id),
  display_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- todosテーブル
CREATE TABLE todos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  title TEXT,
  body TEXT,
  urgency TEXT CHECK (urgency IN ('now', 'today', 'tomorrow', 'later')),
  deadline DATE,
  importance_score REAL DEFAULT 0.0,
  status TEXT CHECK (status IN ('open', 'done')) DEFAULT 'open',
  created_at TIMESTAMP DEFAULT NOW(),
  completed_at TIMESTAMP
);

-- comparisonsテーブル
CREATE TABLE comparisons (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  winner_id UUID REFERENCES todos(id),
  loser_id UUID REFERENCES todos(id),
  created_at TIMESTAMP DEFAULT NOW()
);

-- completion_logテーブル
CREATE TABLE completion_log (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  todo_id UUID REFERENCES todos(id),
  quadrant TEXT CHECK (
    quadrant IN (
      'urgent_important',
      'not_urgent_important',
      'urgent_not_important',
      'not_urgent_not_important'
    )
  ),
  completed_at TIMESTAMP
);

-- RLSを有効化
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;
ALTER TABLE comparisons ENABLE ROW LEVEL SECURITY;
ALTER TABLE completion_log ENABLE ROW LEVEL SECURITY;

-- RLSポリシーを作成
CREATE POLICY "Users can view own profile" ON users
  FOR ALL USING (auth.uid() = id);

CREATE POLICY "Users can manage own todos" ON todos
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own comparisons" ON comparisons
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own completion log" ON completion_log
  FOR ALL USING (
    auth.uid() = (
      SELECT user_id FROM todos WHERE todos.id = completion_log.todo_id
    )
  );

-- トリガー関数：新規ユーザー作成時にusersテーブルにレコードを追加
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.users (id, display_name)
  VALUES (new.id, new.email);
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- トリガーを作成
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
```

## ステップ3: 環境変数の設定（3分）

1. `.env.local.example`を`.env.local`にコピー：
```bash
cp .env.local.example .env.local
```

2. `.env.local`を編集：

### Supabaseの情報を取得
- Supabaseダッシュボードで「Settings」→「API」
- `Project URL`をコピーして`NEXT_PUBLIC_SUPABASE_URL`に設定
- `anon public`キーをコピーして`NEXT_PUBLIC_SUPABASE_ANON_KEY`に設定
- `service_role`キーをコピーして`SUPABASE_SERVICE_ROLE_KEY`に設定

### OpenAI APIキーを取得
- [OpenAI Platform](https://platform.openai.com/api-keys)でAPIキーを作成
- `OPENAI_API_KEY`に設定

## ステップ4: アプリケーションの起動（1分）

```bash
npm run dev
```

ブラウザで http://localhost:3000 を開く

## ステップ5: 初回利用（3分）

1. **アカウント作成**
   - 「アカウントをお持ちでない方はこちら」をクリック
   - メールアドレスとパスワードを入力
   - 確認メールのリンクをクリック

2. **最初のTODO作成**
   - ログイン後、右上の「＋新規タスク」をクリック
   - タスクの内容を入力
   - 緊急度を選択（期限が自動設定される）
   - 「保存」をクリック

3. **機能を試す**
   - ダッシュボードで四象限表示とリスト表示を切り替え
   - 優先度比較タブで2つのタスクを比較
   - タスクを完了してレポートタブで確認

## トラブルシューティング

### Supabase接続エラー
- 環境変数が正しく設定されているか確認
- Supabaseプロジェクトがアクティブか確認

### OpenAI APIエラー
- APIキーが正しいか確認
- APIの利用制限に達していないか確認

### ビルドエラー
```bash
# 依存関係をクリーンインストール
rm -rf node_modules package-lock.json
npm install
```

## 次のステップ

- [README.md](README.md)で詳細な機能説明を確認
- [PROJECT_STRUCTURE.md](PROJECT_STRUCTURE.md)でコード構造を理解
- Vercelへのデプロイ手順はREADMEを参照

## サポート

問題が解決しない場合は、以下を確認してください：
- Node.jsのバージョン: `node --version`
- npmのバージョン: `npm --version`
- `.env.local`の設定内容（APIキーは隠して）
</file>

<file path="README.md">
# ✅ Slack連携 TODO管理アプリ

Next.js + Supabase + OpenAI APIを使用したTODO管理アプリケーションです。

## 🚀 セットアップ手順

### 前提条件

- Node.js 18.0.0以上
- npm または yarn
- Supabaseアカウント
- OpenAI APIキー
- Vercelアカウント（デプロイ用）

### 1. リポジトリのクローン

```bash
git clone <repository-url>
cd todo-app
```

### 2. 依存関係のインストール

```bash
npm install
# または
yarn install
```

### 3. Supabaseプロジェクトのセットアップ

1. [Supabase](https://supabase.com)にログインし、新しいプロジェクトを作成

2. SQLエディタで以下のテーブルを作成：

```sql
-- usersテーブル
CREATE TABLE users (
  id UUID PRIMARY KEY REFERENCES auth.users(id),
  display_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- todosテーブル
CREATE TABLE todos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  title TEXT,
  body TEXT,
  urgency TEXT CHECK (urgency IN ('now', 'today', 'tomorrow', 'later')),
  deadline DATE,
  importance_score REAL DEFAULT 0.0,
  status TEXT CHECK (status IN ('open', 'done')) DEFAULT 'open',
  created_at TIMESTAMP DEFAULT NOW(),
  completed_at TIMESTAMP
);

-- comparisonsテーブル
CREATE TABLE comparisons (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  winner_id UUID REFERENCES todos(id),
  loser_id UUID REFERENCES todos(id),
  created_at TIMESTAMP DEFAULT NOW()
);

-- completion_logテーブル
CREATE TABLE completion_log (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  todo_id UUID REFERENCES todos(id),
  quadrant TEXT CHECK (
    quadrant IN (
      'urgent_important',
      'not_urgent_important',
      'urgent_not_important',
      'not_urgent_not_important'
    )
  ),
  completed_at TIMESTAMP
);

-- RLS（Row Level Security）を有効化
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;
ALTER TABLE comparisons ENABLE ROW LEVEL SECURITY;
ALTER TABLE completion_log ENABLE ROW LEVEL SECURITY;

-- RLSポリシーの作成
CREATE POLICY "Users can view own profile" ON users
  FOR ALL USING (auth.uid() = id);

CREATE POLICY "Users can manage own todos" ON todos
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own comparisons" ON comparisons
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own completion log" ON completion_log
  FOR ALL USING (
    auth.uid() = (
      SELECT user_id FROM todos WHERE todos.id = completion_log.todo_id
    )
  );
```

3. Authenticationを有効化し、Email/Passwordプロバイダーを設定

### 4. 環境変数の設定

`.env.local`ファイルを作成し、以下の環境変数を設定：

```env
# Supabase
NEXT_PUBLIC_SUPABASE_URL=your-project-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# OpenAI
OPENAI_API_KEY=your-openai-api-key

# App
NEXT_PUBLIC_APP_URL=http://localhost:3000
```

### 5. 開発サーバーの起動

```bash
npm run dev
# または
yarn dev
```

ブラウザで http://localhost:3000 を開きます。

## 📱 使い方

### 初回ログイン

1. アプリにアクセスし、「Sign Up」をクリック
2. メールアドレスとパスワードを入力して登録
3. 確認メールのリンクをクリックしてアカウントを有効化

### TODO作成

1. 右上の「＋新規タスク」ボタンをクリック
2. 本文を入力（SlackのURLなども含められます）
3. 緊急度を選択（自動で期限が設定されます）
4. 必要に応じて「見出し生成」ボタンでAIによるタイトル生成
5. 「保存」をクリック

### 優先度比較

1. 「優先度比較」タブをクリック
2. 表示される2つのタスクのうち、より重要な方を選択
3. 必要な回数だけ比較を行い、「ここで終了」をクリック
4. 比較結果に基づいて重要度スコアが更新されます

### レポート確認

1. 「レポート」タブをクリック
2. 期間を選択（日/週/月）
3. 完了タスクの統計とグラフを確認

## 🚀 Vercelへのデプロイ

1. GitHubにリポジトリをプッシュ

```bash
git add .
git commit -m "Initial commit"
git push origin main
```

2. [Vercel](https://vercel.com)にログイン

3. 「New Project」をクリックし、GitHubリポジトリを選択

4. 環境変数を設定（`.env.local`と同じ値）

5. 「Deploy」をクリック

## 🛠️ 技術スタック

- **フロントエンド**: Next.js 14 (App Router), TypeScript
- **UI**: Tailwind CSS, Radix UI
- **状態管理**: Zustand
- **バックエンド**: Supabase (PostgreSQL, Auth, Edge Functions)
- **AI**: OpenAI API
- **ホスティング**: Vercel

## 📁 プロジェクト構造

```
todo-app/
├── app/                    # Next.js App Router
│   ├── layout.tsx         # ルートレイアウト
│   ├── page.tsx           # ダッシュボード
│   ├── compare/           # 比較画面
│   ├── report/            # レポート画面
│   └── api/               # APIルート
├── components/            # Reactコンポーネント
│   ├── ui/               # UIコンポーネント
│   ├── todo/             # TODOコンポーネント
│   └── layout/           # レイアウトコンポーネント
├── lib/                   # ユーティリティ
│   ├── supabase.ts       # Supabaseクライアント
│   └── openai.ts         # OpenAI設定
├── store/                 # Zustand store
└── types/                 # TypeScript型定義
```

## 🔒 セキュリティ

- Supabase RLS（Row Level Security）によるデータ保護
- 環境変数による機密情報の管理
- サーバーサイドでのAPI呼び出し

## 📝 ライセンス

MIT License

## 📄 必要なファイル一覧

プロジェクトに必要な全ファイルのリストです。これらのファイルを作成してください：

### ルートディレクトリ
- `package.json`
- `tsconfig.json`
- `next.config.js`
- `tailwind.config.js`
- `postcss.config.js`
- `middleware.ts`
- `.gitignore`
- `.env.local.example`
- `README.md`
- `QUICKSTART.md`
- `PROJECT_STRUCTURE.md`

### app/
- `app/layout.tsx`
- `app/page.tsx`
- `app/globals.css`
- `app/compare/page.tsx`
- `app/report/page.tsx`
- `app/api/generate-title/route.ts`

### components/
- `components/auth/AuthForm.tsx`
- `components/layout/Navigation.tsx`
- `components/providers/AuthProvider.tsx`
- `components/todo/TodoCard.tsx`
- `components/todo/CreateTodoModal.tsx`
- `components/ui/Button.tsx`

### lib/
- `lib/supabase.ts`
- `lib/utils.ts`

### store/
- `store/todoStore.ts`

### types/
- `types/index.ts`

全てのファイルが提供されています。[QUICKSTART.md](QUICKSTART.md)を参照して、最速でアプリケーションを起動してください。
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      animation: {
        'slide-in': 'slideIn 0.3s ease-out',
        'fade-in': 'fadeIn 0.3s ease-out',
      },
      keyframes: {
        slideIn: {
          from: {
            transform: 'translateY(-10px)',
            opacity: '0',
          },
          to: {
            transform: 'translateY(0)',
            opacity: '1',
          },
        },
        fadeIn: {
          from: {
            opacity: '0',
          },
          to: {
            opacity: '1',
          },
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
